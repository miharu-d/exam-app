services:
  # バックエンド
  backend:
    build:
      context: ./backend  # 1. ビルドの基準となる場所
      dockerfile: ../docker/backend/Dockerfile # 2. Dockerfileの場所
    container_name: exam_app_backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      db: # 'db' サービスに依存
        condition: service_healthy
    environment:
      DATABASE_URL: "postgresql+psycopg://exam_user:exam_password@db:5432/exam_db"


  # フロントエンド
  frontend:
    build:
      context: ./frontend # 1. ビルドの基準となる場所
      dockerfile: ../docker/frontend/Dockerfile # 2. Dockerfileの場所
    container_name: exam_app_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
    depends_on:
      - backend
    command: npm run dev
    env_file:
      - ./frontend/.env.local

  # データベース
  db:
    image: postgres:15-alpine
    container_name: exam_db_postgres
    environment:
      POSTGRES_USER: exam_user
      POSTGRES_PASSWORD: exam_password
      POSTGRES_DB: exam_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck: # PostgreSQLのヘルスチェック定義
      test: ["CMD-SHELL", "pg_isready -U exam_user -d exam_db"] # DBへの接続テストコマンド
      interval: 5s # 5秒ごとにチェック
      timeout: 5s  # チェックが5秒でタイムアウトしたら失敗
      retries: 5   # 5回連続で成功するまで 'healthy' とみなさない
      start_period: 10s # コンテナ起動後、最初の10秒間は失敗してもリトライカウントに含めない (DB起動に時間がかかるため)


volumes:
  postgres_data: