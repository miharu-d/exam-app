import asyncio
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text
from sqlalchemy.sql import func
import random

from app.db.base import SessionLocal
from app.models.problem import Problem
from app.models.user import User

# 投入したい初期データ (ユーザー)
initial_users_data = [
    {"username": "testuser1", "email": "test1@example.com", "hashed_password": "dummy_hashed_password_1", "is_active": True},
    {"username": "testuser2", "email": "test2@example.com", "hashed_password": "dummy_hashed_password_2", "is_active": True},
    {"username": "testuser3", "email": "test3@example.com", "hashed_password": "dummy_hashed_password_3", "is_active": True},
]

# 問題のテンプレートデータ
# 各科目が3問以上になるように増強
problem_templates = [
    # 統計学 (合計4問)
    {"subject": "統計学", "question": "p値とは何か、具体例を挙げて説明してください。", "answer": "帰無仮説が真であると仮定したとき、観測されたデータ以上に極端なデータが得られる確率。例えば、ある薬の効果を検証する際に、偶然の結果である確率を示す。"},
    {"subject": "統計学", "question": "第一種の過誤と第二種の過誤の違いを、それぞれの危険性を考慮して説明してください。", "answer": "第一種の過誤は真である帰無仮説を棄却する誤り（偽陽性）、第二種の過誤は偽である帰無仮説を採択する誤り（偽陰性）。前者は「無実の人を有罪にする」、後者は「犯人を見逃す」という危険性を持つ。"},
    {"subject": "統計学", "question": "ベイズの定理を、簡単な例（例えば病気の診断）を用いて説明してください。", "answer": "条件付き確率を求めるための定理で、事前確率と尤度から事後確率を計算する。検査の陽性・陰性結果から、実際に病気である確率を推測する際に利用される。"},
    {"subject": "統計学", "question": "中心極限定理の意義と、それが統計学でどのように応用されるか説明してください。", "answer": "標本平均の分布が、元の分布が何であっても、標本サイズが大きくなるにつれて正規分布に近づくという定理。推定や仮説検定において、正規分布の仮定を正当化するために用いられる。"},

    # 線形代数 (合計3問)
    {"subject": "線形代数", "question": "固有値と固有ベクトルの関係を、幾何学的な意味を含めて述べてください。", "answer": "行列Aを作用させても向きが変わらず、定数倍されるだけのベクトルが固有ベクトルであり、その定数倍率が固有値である。"},
    {"subject": "線形代数", "question": "逆行列が存在する条件を述べ、その計算方法の概要を説明してください。", "answer": "正方行列であり、行列式が0でないこと。計算方法は、掃き出し法（ガウス・ジョルダン法）や余因子行列を用いる方法がある。"},
    {"subject": "線形代数", "question": "線形独立と線形従属の違いについて説明し、それぞれどのような状況で重要になりますか？", "answer": "線形独立とは、ベクトルの組が互いに比例関係になく、どのベクトルも他のベクトルの線形結合で表せない状態。線形従属はその逆。基底や次元の概念において重要。"},

    # 微分積分 (合計3問)
    {"subject": "微分積分", "question": "テイラー展開の目的と、それがどのような場面で活用されるか説明してください。", "answer": "複雑な関数を、ある点の周りで多項式によって近似すること。物理学での運動解析、工学での制御システム設計、コンピュータグラフィックスなど、様々な分野で活用される。"},
    {"subject": "微分積分", "question": "不定積分と定積分の違いについて説明し、それぞれの具体的な用途を述べてください。", "answer": "不定積分は導関数がf(x)となる関数F(x)を求める操作（原始関数）、定積分は関数のグラフとx軸で囲まれた領域の面積を求める操作。前者は微分の逆演算、後者は面積や体積の計算に利用。"},
    {"subject": "微分積分", "question": "偏微分とは何か、多変数関数の勾配とどのように関連しますか？", "answer": "多変数関数において、他の変数を固定し、ある一つの変数についてのみ微分すること。勾配（グラディエント）は、各変数の偏微分を要素とするベクトルであり、関数が最も急峻に増加する方向を示す。"},

    # データ構造 (合計3問)
    {"subject": "データ構造", "question": "ハッシュテーブルの原理と、衝突（コリジョン）を解決するための代表的な手法を説明してください。", "answer": "キーと値のペアを格納するデータ構造で、キーから値へのマッピングにハッシュ関数を使用する。衝突解決にはチェイン法（連結リスト）やオープンアドレス法（線形探索、二次探索など）がある。"},
    {"subject": "データ構造", "question": "連結リストと配列（リスト）の構造と、それぞれのメリット・デメリットを比較して説明してください。", "answer": "連結リストはノードが次のノードへのポインタを持つ構造、配列は連続したメモリ領域に要素を格納する。連結リストは要素の挿入・削除が高速だがアクセスが遅い、配列はアクセスが高速だが挿入・削除が遅い。"},
    {"subject": "データ構造", "question": "スタックとキューの概念を説明し、それぞれどのような場面で利用されますか？", "answer": "スタックはLIFO（後入れ先出し）のデータ構造（例: 関数呼び出しスタック）、キューはFIFO（先入れ先出し）のデータ構造（例: タスクスケジューリング）。"},

    # アルゴリズム (合計3問)
    {"subject": "アルゴリズム", "question": "クイックソートの平均計算量を教えてください。また、最悪計算量になるのはどのような場合ですか？", "answer": "平均計算量はO(N log N)。最悪計算量はO(N^2)で、これは常にピボットが最小値または最大値になるような、ソート済みや逆順のデータが入力された場合に発生する。"},
    {"subject": "アルゴリズム", "question": "二分探索（バイナリサーチ）の原理と、適用できる条件を説明してください。", "answer": "ソートされた配列において、中央の要素と比較して探索範囲を半分にしていく探索アルゴリズム。適用条件は、探索対象のデータがソート済みであること。"},
    {"subject": "アルゴリズム", "question": "グラフ探索アルゴリズムである深さ優先探索（DFS）と幅優先探索（BFS）の違いと、それぞれの用途を説明してください。", "answer": "DFSは根から深く探索し、行き止まると戻る（例: 経路探索、トポロジカルソート）。BFSは根から近い順に探索（例: 最短経路探索、ネットワークの最小ホップ数）。"},

    # データベース (合計3問)
    {"subject": "データベース", "question": "ACID特性とは何ですか？それぞれの特性がデータベースの信頼性にとってどのように重要か説明してください。", "answer": "トランザクションの信頼性を保証する4つの特性 (Atomicity, Consistency, Isolation, Durability) の頭文字。これらが保証されることで、データベース操作は常に整合性を保ち、障害発生時もデータを安全に保つことができる。"},
    {"subject": "データベース", "question": "リレーショナルデータベースにおける正規化の目的と、そのメリット・デメリットを説明してください。", "answer": "データ冗長性の排除とデータ整合性の確保が目的。メリットはデータの一貫性と更新の容易さ、デメリットは結合操作が増えクエリが複雑になること。"},
    {"subject": "データベース", "question": "SQLインジェクション攻撃とは何か、その対策方法を具体的に説明してください。", "answer": "Webアプリケーションの入力フォームなどを介して不正なSQL文を注入し、データベースを不正に操作する攻撃。プリペアドステートメントの使用、エスケープ処理、入力値検証が主な対策。"},

    # ネットワーク (合計3問)
    {"subject": "ネットワーク", "question": "TCPとUDPの違いを説明し、それぞれどのようなアプリケーション層プロトコルで利用されているか具体例を挙げて説明してください。", "answer": "TCPは信頼性のある接続指向プロトコル（例: HTTP, FTP, SMTP）、UDPは高速だが信頼性がないコネクションレスプロトコル（例: DNS, DHCP, VoIP）。"},
    {"subject": "ネットワーク", "question": "OSI参照モデルの7層構造について、各層の役割と代表的なプロトコルを挙げてください。", "answer": "物理層、データリンク層、ネットワーク層、トランスポート層、セッション層、プレゼンテーション層、アプリケーション層。データ通信の機能を抽象化し、標準化するためのモデル。"},
    {"subject": "ネットワーク", "question": "IPアドレスとMACアドレスの違いを説明し、それぞれの役割について述べてください。", "answer": "IPアドレスはネットワーク層で論理的に割り当てられる識別子（例: 192.168.1.1）、MACアドレスはデータリンク層でハードウェアに物理的に割り当てられる一意の識別子。IPアドレスはルーティングに、MACアドレスは同一ネットワーク内の通信に利用される。"},

    # 民法 (合計3問)
    {"subject": "民法", "question": "契約の成立要件について説明し、具体例を挙げて解説してください。", "answer": "契約は、申込みと承諾という意思表示の合致によって成立する。例えば、売買契約では「売ります」という申込みと「買います」という承諾が合致することで成立する。"},
    {"subject": "民法", "question": "時効の制度について、取得時効と消滅時効の違いを説明してください。", "answer": "取得時効は一定期間他人の物を占有することで所有権などを取得する制度。消滅時効は一定期間権利を行使しないことで権利が消滅する制度。"},
    {"subject": "民法", "question": "不法行為の成立要件について説明し、具体例を挙げて損害賠償請求の場面を解説してください。", "answer": "不法行為は、故意または過失により他人の権利を侵害し、これによって損害を与えた場合に成立する。例として、交通事故で相手に怪我を負わせた場合、治療費や慰謝料の損害賠償責任が発生する。"},

    # 憲法 (合計3問)
    {"subject": "憲法", "question": "日本国憲法における基本的人権の保障について、その種類と意義を述べてください。", "answer": "基本的人権は、自由権、平等権、社会権、参政権、請求権などに分類される。国家権力から個人の尊厳を保障し、個人の自由な活動を可能にする重要な権利である。"},
    {"subject": "憲法", "question": "政教分離原則とは何か、その目的と具体的な内容について説明してください。", "answer": "政治と宗教を分離するという原則で、国家が特定の宗教に特権を与えたり、宗教的活動に干渉したりすることを禁止する。信教の自由を保障し、宗教的紛争を避ける目的がある。"},
    {"subject": "憲法", "question": "公共の福祉による基本的人権の制約について、具体例を挙げて説明してください。", "answer": "基本的人権は無制限ではなく、他の人権や社会全体の利益のために制約を受けることがある。例えば、表現の自由に対する名誉毀損罪の制約や、財産権に対する土地利用規制などが挙げられる。"},

    # 刑法 (合計3問)
    {"subject": "刑法", "question": "正当防衛の成立要件について説明し、過剰防衛との違いを明確にしてください。", "answer": "正当防衛は、急迫不正の侵害に対して自己または他人の権利を防衛するため、やむを得ずにした行為であり、罰しない。過剰防衛は、防衛行為が防衛の程度を超えた場合で、刑が減軽または免除される可能性がある。"},
    {"subject": "刑法", "question": "故意と過失の違いについて説明し、それぞれどのような犯罪類型で問題となるか例示してください。", "answer": "故意は、犯罪事実の発生を認識・認容して行為を行うこと。過失は、注意義務を怠り結果を発生させること。故意犯（例: 殺人罪）と過失犯（例: 過失運転致死傷罪）がある。"},
    {"subject": "刑法", "question": "未遂犯と既遂犯の違い、および未遂犯が罰せられる根拠について説明してください。", "answer": "未遂犯は犯罪行為に着手したが結果が発生しなかった場合、既遂犯は結果まで発生した場合。未遂犯が罰せられる根拠は、行為の危険性や犯罪意思の顕在化にあるとされる。"},

    # 行政法 (合計3問)
    {"subject": "行政法", "question": "行政指導の法的性質と、その問題点について論じてください。", "answer": "行政指導は、行政機関がその任務または所掌事務の範囲内において、特定の目的を達成するため特定の者に一定の作為または不作為を求める指導、勧告、助言その他の行為であり、処分とは異なり法的拘束力はない。しかし、実質的な強制力を持ちうる点が問題となる。"},
    {"subject": "行政法", "question": "行政行為の瑕疵と違法性承継の原則について説明してください。", "answer": "行政行為の瑕疵とは、行政行為に法律上の要件を満たさない点があること。違法性承継とは、先行する行政行為に違法性があっても、後行行為に当然に違法性が承継されない原則。"},
    {"subject": "行政法", "question": "国家賠償請求制度について、その根拠となる法律と成立要件を説明してください。", "answer": "国家賠償法を根拠とし、公権力の行使に当たる公務員の違法な行為によって損害が生じた場合に、国または公共団体が賠償責任を負う制度。"},

    # 商法 (合計3問)
    {"subject": "商法", "question": "株式会社における取締役の忠実義務について説明し、具体的にどのような行為がこれに違反するか例示してください。", "answer": "取締役は、法令及び定款並びに株主総会の決議を遵守し、会社のため忠実にその職務を遂行する義務（会社法355条）を負う。競業避止義務違反、利益相反取引、会社財産の私的流用などが該当する。"},
    {"subject": "商法", "question": "株主総会の決議事項と、普通決議・特別決議の違いを説明してください。", "answer": "株主総会は会社の最高意思決定機関で、定款変更、役員選任などを決議。普通決議は議決権過半数出席で出席株主の議決権過半数、特別決議は議決権過半数出席で2/3以上の賛成が必要。"},
    {"subject": "商法", "question": "会社設立における発起設立と募集設立の違いについて説明してください。", "answer": "発起設立は発起人が設立時発行株式のすべてを引き受けて設立する形式。募集設立は発起人以外の者からも設立時発行株式の引受人を募集して設立する形式。"},

    # 民事訴訟法 (合計3問)
    {"subject": "民事訴訟法", "question": "弁論主義の原則とは何か、その内容と例外について説明してください。", "answer": "裁判所の判決の基礎となる事実及び証拠の収集・提出責任が当事者にあるという原則。例外としては、釈明権の行使、職権探知主義の適用場面などがある。"},
    {"subject": "民事訴訟法", "question": "口頭弁論終結時における裁判の基準時について説明してください。", "answer": "口頭弁論終結時を基準として、事実関係や証拠の評価が行われ、判決が下されるという原則。口頭弁論終結後に発生した事実は、原則として判決の基礎とならない。"},
    {"subject": "民事訴訟法", "question": "訴訟費用とは何か、その負担原則について説明してください。", "answer": "訴訟の遂行に必要な費用（印紙代、証人旅費など）のこと。原則として敗訴者が負担する（敗訴者負担主義）が、例外もある。"},
]

# month の選択肢を定義 (変更なし)
ALLOWED_MONTHS = [4, 5, 6, 7, 10, 11, 12, 1]

async def seed_data():
    async with SessionLocal() as db:
        # データベースが空かどうかを確認する
        problems_count_result = await db.execute(text(f"SELECT COUNT(*) FROM {Problem.__tablename__}"))
        users_count_result = await db.execute(text(f"SELECT COUNT(*) FROM {User.__tablename__}"))

        if problems_count_result.scalar_one() > 0 or users_count_result.scalar_one() > 0:
            print("データベースには既にデータが存在します。初期データの投入をスキップします。")
            return

        print("初期データの投入を開始します...")

        # ユーザーデータの投入
        created_users = []
        for user_data in initial_users_data:
            now = func.now()
            db_user = User(
                username=user_data["username"],
                email=user_data["email"],
                hashed_password=user_data["hashed_password"],
                is_active=user_data["is_active"],
                created_at=now,
                updated_at=now,
                deleted_at=None
            )
            db.add(db_user)
            await db.flush()
            await db.refresh(db_user)
            created_users.append(db_user)
            print(f"ユーザー '{db_user.username}' (ID: {db_user.id}) を追加しました。")

        # 問題データの投入 (ユーザーIDを割り当て、重複を避ける)
        available_problem_templates = list(problem_templates)
        
        for user in created_users:
            # ユーザーごとに生成する問題数をランダムに決定 (5〜20個)
            # ただし、利用可能なテンプレートの数を超えないようにする
            # 全体の問題テンプレートの数(現在24問)が足りなくなる場合も考慮
            max_problems_for_user = min(random.randint(5, 20), len(available_problem_templates))
            
            print(f"ユーザー '{user.username}' に {max_problems_for_user} 個の問題を作成します。")
            
            # ユーザーに割り当てる問題テンプレートをランダムに選択し、重複を避ける
            # available_problem_templates の要素数が max_problems_for_user より少ない場合にエラーにならないようrandom.sampleを使う
            problems_for_current_user = random.sample(available_problem_templates, max_problems_for_user)
            
            # 使用したテンプレートをavailable_problem_templatesから削除
            for p_template in problems_for_current_user:
                available_problem_templates.remove(p_template)

            # 問題をデータベースに追加
            for i, p_data in enumerate(problems_for_current_user):
                now = func.now()
                db_problem = Problem(
                    subject=p_data["subject"],
                    year=random.randint(2020, 2024),
                    month=random.choice(ALLOWED_MONTHS),
                    question=f"{p_data['question']} (作成者: {user.username}, No.{i+1})",
                    answer=p_data["answer"],
                    hint=f"これはヒントです。({p_data['subject']})",
                    explanation=f"これは解説です。詳細な説明が入ります。({p_data['subject']})",
                    user_id=user.id,
                    created_at=now,
                    updated_at=now,
                    deleted_at=None
                )
                db.add(db_problem)
                print(f"  - 問題 '{db_problem.subject}' (作成者: {user.username}) を追加しました。")

        await db.commit()
        print("初期データの投入が完了しました。")

if __name__ == "__main__":
    asyncio.run(seed_data())